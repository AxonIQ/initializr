name: 'CI: Perform a production release'

on:
  workflow_dispatch:
    inputs:
      releaseTag:
        description: 'Release TAG (axoniq-initializr-X.X.X)'
        required: true
        default: 'axoniq-initializr-X.X.X'
      releaseVersion:
        description: 'Release Version (version without SNAPSHOT)'
        required: true
        default: 'X.X.X'
      developmentVersion:
        description: 'Development Version'
        required: true
        default: '-SNAPSHOT'

jobs:
  setup-build-push:
    name: Test, Build, Tag and Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.DEVBOT_GITHUB_TOKEN }}
      - run: |
          git config user.name 'AxonIQ devbot'
          git config user.email 'devbot@axoniq.io'
      - uses: actions/setup-java@v1.4.3
        with:
          java-version: 11

      # Setup gcloud CLI, needed to pull and push image on gcr
      - uses: google-github-actions/setup-gcloud@main
        with:
          version: '297.0.1'
          service_account_key: ${{ secrets.GKE_DEVOPS_SA_KEY }}
          project_id: 'axoniq-devops'
          export_default_credentials: true

      # Configure Docker to use the gcloud command-line tool as a credential
      # helper for authentication
      - run: |-
          gcloud --quiet auth configure-docker

      - uses: actions/cache@v2.1.3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven

      - name: Maven Build and Test
        run: |
          ./mvnw -B -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120 verify
        env:
          GITHUB_TOKEN: ${{ secrets.DEVBOT_GITHUB_TOKEN }}

      - name: Maven release prepare no tests
        run: |
          ./mvnw --batch-mode -Dhttp.keepAlive=false \
                        -Dmaven.wagon.http.pool=false \
                        -Dmaven.wagon.httpconnectionManager.ttlSeconds=120 \
                        -Dtag=$RELEASE_TAG \
                        -DreleaseVersion=$RELEASE_VERSION \
                        -DdevelopmentVersion=$DEVELOPMENT_VERSION \
                        -DpreparationGoals=clean \
                        release:prepare
        env:
          MAVEN_USERNAME: ${{ secrets.DEVBOT_GITHUB_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.DEVBOT_GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.DEVBOT_GITHUB_TOKEN }}
          RELEASE_TAG: ${{ github.event.inputs.releaseTag }}
          RELEASE_VERSION: ${{ github.event.inputs.releaseVersion }}
          DEVELOPMENT_VERSION: ${{ github.event.inputs.developmentVersion }}
